<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>信客博客</title>
  <subtitle>githink.cn</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.githink.cn/"/>
  <updated>2018-09-13T02:32:03.059Z</updated>
  <id>http://blog.githink.cn/</id>
  
  <author>
    <name>信客</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>k8s高可用集群V1.11.1安装记录</title>
    <link href="http://blog.githink.cn/2018/09/13/k8s%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4V1-11-1%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"/>
    <id>http://blog.githink.cn/2018/09/13/k8s高可用集群V1-11-1安装记录/</id>
    <published>2018-09-13T02:23:54.000Z</published>
    <updated>2018-09-13T02:32:03.059Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><table>
<thead>
<tr>
<th>hostname</th>
<th>IP</th>
<th>内存</th>
<th>职责</th>
</tr>
</thead>
<tbody>
<tr>
<td>k8s-vip</td>
<td>192.168.1.110</td>
<td>——</td>
<td>VIP（虚拟IP）</td>
</tr>
<tr>
<td>k8s-master1</td>
<td>192.168.1.111</td>
<td>4G</td>
<td>Master,Keepalived,HAProxy</td>
</tr>
<tr>
<td>k8s-master2</td>
<td>192.168.1.112</td>
<td>4G</td>
<td>Master,Keepalived,HAProxy</td>
</tr>
<tr>
<td>k8s-master3</td>
<td>192.168.1.113</td>
<td>4G</td>
<td>Master,Keepalived,HAProxy</td>
</tr>
<tr>
<td>k8s-slave1</td>
<td>192.168.1.114</td>
<td>4G</td>
<td>Worker</td>
</tr>
<tr>
<td>k8s-slave1</td>
<td>192.168.1.115</td>
<td>4G</td>
<td>Worker</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h5 id="1-配置hosts信息（所有节点）"><a href="#1-配置hosts信息（所有节点）" class="headerlink" title="1. 配置hosts信息（所有节点）"></a>1. 配置hosts信息（所有节点）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;&gt; /etc/hosts</span><br><span class="line">192.168.1.110 k8s-vip</span><br><span class="line">192.168.1.111 k8s-master1</span><br><span class="line">192.168.1.112 k8s-master2</span><br><span class="line">192.168.1.113 k8s-master3</span><br><span class="line">192.168.1.114 k8s-slave1</span><br><span class="line">192.168.1.115 k8s-slave2</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h5 id="2-安装Docker-（所有节点）"><a href="#2-安装Docker-（所有节点）" class="headerlink" title="2. 安装Docker （所有节点）"></a>2. 安装Docker （所有节点）</h5><p>安装Docker，步骤略可参考<a href="http://www.ebanban.com/?p=496" target="_blank" rel="noopener">http://www.ebanban.com/?p=496</a></p>
<h5 id="3-在所有Master节点上输入以下环境变量，主机名和IP信息根据自己的实际的情况进行修改（-台Master节点）"><a href="#3-在所有Master节点上输入以下环境变量，主机名和IP信息根据自己的实际的情况进行修改（-台Master节点）" class="headerlink" title="3. 在所有Master节点上输入以下环境变量，主机名和IP信息根据自己的实际的情况进行修改（#台Master节点）"></a>3. 在所有Master节点上输入以下环境变量，主机名和IP信息根据自己的实际的情况进行修改（#台Master节点）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line">export LOAD_BALANCER_DNS=k8s-vip</span><br><span class="line">export LOAD_BALANCER_PORT=8443</span><br><span class="line">export CP0_HOSTNAME=k8s-master1</span><br><span class="line">export CP1_HOSTNAME=k8s-master2</span><br><span class="line">export CP2_HOSTNAME=k8s-master3</span><br><span class="line">export VIP_IP=192.168.1.110</span><br><span class="line">export CP0_IP=192.168.1.111</span><br><span class="line">export CP1_IP=192.168.1.112</span><br><span class="line">export CP2_IP=192.168.1.113</span><br></pre></td></tr></table></figure>
<h5 id="4-关闭防火墙、关闭swap、关闭SELinux、调整内核参数-所有节点"><a href="#4-关闭防火墙、关闭swap、关闭SELinux、调整内核参数-所有节点" class="headerlink" title="4. 关闭防火墙、关闭swap、关闭SELinux、调整内核参数(所有节点)"></a>4. 关闭防火墙、关闭swap、关闭SELinux、调整内核参数(所有节点)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop firewalld</span><br><span class="line">sudo systemctl disable firewalld</span><br><span class="line">sudo swapoff -a</span><br><span class="line">sudo sed -i &apos;/ swap / s/^\(.*\)$/#\1/g&apos; /etc/fstab</span><br><span class="line">sudo setenforce 0</span><br><span class="line">sed -i &apos;s/SELINUX=permissive/SELINUX=disabled/&apos; /etc/sysconfig/selinux</span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure>
<h5 id="5-准备镜像（所有节点）"><a href="#5-准备镜像（所有节点）" class="headerlink" title="5.准备镜像（所有节点）"></a>5.准备镜像（所有节点）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 创建脚本加入如下内容</span><br><span class="line">#!/bin/bash</span><br><span class="line">images=(kube-proxy-amd64:v1.11.1 kube-scheduler-amd64:v1.11.1 kube-controller-manager-amd64:v1.11.1 kube-apiserver-amd64:v1.11.1</span><br><span class="line">etcd-amd64:3.2.18 pause-amd64:3.1 kubernetes-dashboard-amd64:v1.8.3 k8s-dns-sidecar-amd64:1.14.9 k8s-dns-kube-dns-amd64:1.14.9</span><br><span class="line">k8s-dns-dnsmasq-nanny-amd64:1.14.9 )</span><br><span class="line">for imageName in $&#123;images[@]&#125; ; do</span><br><span class="line">docker pull mirrorgooglecontainers/$imageName</span><br><span class="line">docker tag mirrorgooglecontainers/$imageName k8s.gcr.io/$imageName</span><br><span class="line">docker rmi mirrorgooglecontainers/$imageName</span><br><span class="line">done</span><br><span class="line">docker tag da86e6ba6ca1 k8s.gcr.io/pause:3.1</span><br><span class="line">docker pull coredns/coredns:1.1.3</span><br><span class="line">docker tag coredns/coredns:1.1.3 k8s.gcr.io/coredns:1.1.3</span><br><span class="line">docker rmi coredns/coredns:1.1.3</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 添加运行权限</span><br><span class="line">chmod -R 777 ./xxx.sh</span><br><span class="line"></span><br><span class="line"># 执行脚本</span><br><span class="line">./xxx.sh</span><br></pre></td></tr></table></figure>
<h5 id="6-安装、配置kubelet-（所有节点）"><a href="#6-安装、配置kubelet-（所有节点）" class="headerlink" title="6. 安装、配置kubelet （所有节点）"></a>6. 安装、配置kubelet （所有节点）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line">yum install -y kubelet-1.11.1 kubeadm-1.11.1 kubectl-1.11.1</span><br><span class="line">systemctl enable kubelet</span><br></pre></td></tr></table></figure>
<h5 id="7-准备SSH-Keys（任意Master节点）"><a href="#7-准备SSH-Keys（任意Master节点）" class="headerlink" title="7.准备SSH Keys（任意Master节点）"></a>7.准备SSH Keys（任意Master节点）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 生成SSH Key（通常在第一台Master上操作，可以在终端上操作）</span><br><span class="line">ssh-keygen -t rsa -b 2048 -f /root/.ssh/id_rsa -N &quot;&quot;</span><br><span class="line"></span><br><span class="line"># 将SSH Key复制给其他主机</span><br><span class="line">for host in &#123;$CP0_HOSTNAME,$CP1_HOSTNAME,$CP2_HOSTNAME&#125;; do ssh-copy-id $host; done $host; done</span><br></pre></td></tr></table></figure>
<h5 id="8-部署第一个keepalived-（第一个Master节点）"><a href="#8-部署第一个keepalived-（第一个Master节点）" class="headerlink" title="8. 部署第一个keepalived （第一个Master节点）"></a>8. 部署第一个keepalived （第一个Master节点）</h5><p><strong>keepalived用于生产浮动的虚拟IP，并将浮动IP分配给优先级最高且haproxy正常运行的节点<br>在第一台Master上配置和启动keepalived，若网卡名称不为示例中的eth0则改为对应名称</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 安装 部署第一个keepalived</span><br><span class="line">yum install -y keepalived curl psmisc &amp;&amp; systemctl enable keepalived</span><br><span class="line"></span><br><span class="line"># 自定义配置</span><br><span class="line">cat &lt;&lt; EOF &gt; /etc/keepalived/keepalived.conf</span><br><span class="line">vrrp_script haproxy-check &#123;</span><br><span class="line">    script &quot;killall -0 haproxy&quot;</span><br><span class="line">    interval 2</span><br><span class="line">    weight 20</span><br><span class="line">&#125; </span><br><span class="line">vrrp_instance haproxy-vip &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    priority 102</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    advert_int 3</span><br><span class="line">    unicast_src_ip $CP0_IP</span><br><span class="line">    unicast_peer &#123;</span><br><span class="line">        $CP1_IP</span><br><span class="line">        $CP2_IP</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        $VIP_IP</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        haproxy-check weight 20</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 启动 keepalived</span><br><span class="line">systemctl start keepalived</span><br></pre></td></tr></table></figure>
<h5 id="9-部署第二个keepalived-（第二个Master节点）"><a href="#9-部署第二个keepalived-（第二个Master节点）" class="headerlink" title="9. 部署第二个keepalived （第二个Master节点）"></a>9. 部署第二个keepalived （第二个Master节点）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 安装 部署第一个keepalived</span><br><span class="line">yum install -y keepalived curl psmisc &amp;&amp; systemctl enable keepalived</span><br><span class="line"></span><br><span class="line"># 自定义配置</span><br><span class="line">cat &lt;&lt; EOF &gt; /etc/keepalived/keepalived.conf</span><br><span class="line">vrrp_script haproxy-check &#123;</span><br><span class="line">    script &quot;killall -0 haproxy&quot;</span><br><span class="line">    interval 2</span><br><span class="line">    weight 20</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance haproxy-vip &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    priority 101</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    advert_int 3</span><br><span class="line">    unicast_src_ip $CP1_IP</span><br><span class="line">    unicast_peer &#123;</span><br><span class="line">        $CP0_IP</span><br><span class="line">        $CP2_IP</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        $VIP_IP</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        haproxy-check weight 20</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 启动 keepalived</span><br><span class="line">systemctl start keepalived</span><br></pre></td></tr></table></figure>
<h5 id="10-部署第三个keepalived-（第三个Master节点）"><a href="#10-部署第三个keepalived-（第三个Master节点）" class="headerlink" title="10. 部署第三个keepalived （第三个Master节点）"></a>10. 部署第三个keepalived （第三个Master节点）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 安装 部署第一个keepalived</span><br><span class="line">yum install -y keepalived curl psmisc &amp;&amp; systemctl enable keepalived</span><br><span class="line"></span><br><span class="line"># 自定义配置</span><br><span class="line">cat &lt;&lt; EOF &gt; /etc/keepalived/keepalived.conf</span><br><span class="line">vrrp_script haproxy-check &#123;</span><br><span class="line">    script &quot;killall -0 haproxy&quot;</span><br><span class="line">    interval 2</span><br><span class="line">    weight 20</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance haproxy-vip &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    priority 100</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    advert_int 3</span><br><span class="line">    unicast_src_ip $CP2_IP</span><br><span class="line">    unicast_peer &#123;</span><br><span class="line">        $CP0_IP</span><br><span class="line">        $CP1_IP</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        $VIP_IP</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">        haproxy-check weight 20</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 启动 keepalived</span><br><span class="line">systemctl start keepalived</span><br></pre></td></tr></table></figure>
<h5 id="11-部署HAProxy-（所有Master节点）"><a href="#11-部署HAProxy-（所有Master节点）" class="headerlink" title="11. 部署HAProxy （所有Master节点）"></a>11. 部署HAProxy （所有Master节点）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># 安装HAproxy</span><br><span class="line">yum install -y haproxy &amp;&amp; systemctl enable haproxy</span><br><span class="line"></span><br><span class="line"># 自定义配置文件</span><br><span class="line">cat &lt;&lt; EOF &gt; /etc/haproxy/haproxy.cfg</span><br><span class="line">global</span><br><span class="line">  log 127.0.0.1 local0</span><br><span class="line">  log 127.0.0.1 local1 notice</span><br><span class="line">  tune.ssl.default-dh-param 2048</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">  log global</span><br><span class="line">  mode http</span><br><span class="line">  option dontlognull</span><br><span class="line">  timeout connect 5000ms</span><br><span class="line">  timeout client  600000ms</span><br><span class="line">  timeout server  600000ms</span><br><span class="line"></span><br><span class="line">listen stats</span><br><span class="line">    bind :9090</span><br><span class="line">    mode http</span><br><span class="line">    balance</span><br><span class="line">    stats uri /haproxy_stats</span><br><span class="line">    stats auth admin:admin</span><br><span class="line">    stats admin if TRUE</span><br><span class="line"></span><br><span class="line">frontend kube-apiserver-https</span><br><span class="line">   mode tcp</span><br><span class="line">   bind :8443</span><br><span class="line">   default_backend kube-apiserver-backend</span><br><span class="line"></span><br><span class="line">backend kube-apiserver-backend</span><br><span class="line">    mode tcp</span><br><span class="line">    balance roundrobin</span><br><span class="line">    stick-table type ip size 200k expire 30m</span><br><span class="line">    stick on src</span><br><span class="line">    server k8s-master1 192.168.1.111:6443 check</span><br><span class="line">    server k8s-master2 192.168.1.112:6443 check</span><br><span class="line">    server k8s-master3 192.168.1.113:6443 check</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 启动 HAproxy</span><br><span class="line">systemctl start haproxy</span><br></pre></td></tr></table></figure>
<h3 id="安装kubernetes"><a href="#安装kubernetes" class="headerlink" title="安装kubernetes"></a>安装kubernetes</h3><h4 id="1-配置第一个Master节点（第一个Master节点）"><a href="#1-配置第一个Master节点（第一个Master节点）" class="headerlink" title="1. 配置第一个Master节点（第一个Master节点）"></a>1. 配置第一个Master节点（第一个Master节点）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;kubeadm-master.config&lt;&lt;EOF</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1alpha2</span><br><span class="line">kind: MasterConfiguration</span><br><span class="line">kubernetesVersion: v1.11.1</span><br><span class="line"></span><br><span class="line">apiServerCertSANs:</span><br><span class="line">- &quot;k8s-master1&quot;</span><br><span class="line">- &quot;k8s-master2&quot;</span><br><span class="line">- &quot;k8s-master3&quot;</span><br><span class="line">- &quot;192.168.1.111&quot;</span><br><span class="line">- &quot;192.168.1.112&quot;</span><br><span class="line">- &quot;192.168.1.113&quot;</span><br><span class="line">- &quot;192.168.1.110&quot;</span><br><span class="line">- &quot;127.0.0.1&quot;</span><br><span class="line"></span><br><span class="line">api:</span><br><span class="line">  advertiseAddress: $CP0_IP</span><br><span class="line">  controlPlaneEndpoint: 192.168.1.110:8443</span><br><span class="line"></span><br><span class="line">etcd:</span><br><span class="line">  local:</span><br><span class="line">    extraArgs:</span><br><span class="line">      listen-client-urls: &quot;https://127.0.0.1:2379,https://$CP0_IP:2379&quot;</span><br><span class="line">      advertise-client-urls: &quot;https://$CP0_IP:2379&quot;</span><br><span class="line">      listen-peer-urls: &quot;https://$CP0_IP:2380&quot;</span><br><span class="line">      initial-advertise-peer-urls: &quot;https://$CP0_IP:2380&quot;</span><br><span class="line">      initial-cluster: &quot;$CP0_HOSTNAME=https://$CP0_IP:2380&quot;</span><br><span class="line">    serverCertSANs:</span><br><span class="line">      - $CP0_HOSTNAME</span><br><span class="line">      - $CP0_IP</span><br><span class="line">    peerCertSANs:</span><br><span class="line">      - $CP0_HOSTNAME</span><br><span class="line">      - $CP0_IP</span><br><span class="line"></span><br><span class="line">controllerManagerExtraArgs:</span><br><span class="line">  node-monitor-grace-period: 10s</span><br><span class="line">  pod-eviction-timeout: 10s</span><br><span class="line"></span><br><span class="line">networking:</span><br><span class="line">  podSubnet: 10.244.0.0/16</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 初始化</span><br><span class="line"># 注意保存返回的 join 命令</span><br><span class="line">kubeadm init --config kubeadm-master.config</span><br><span class="line"></span><br><span class="line"># 打包ca相关文件上传至其他master节点</span><br><span class="line">cd /etc/kubernetes &amp;&amp; tar cvzf k8s-key.tgz admin.conf pki/ca.* pki/sa.* pki/front-proxy-ca.* pki/etcd/ca.*</span><br><span class="line"></span><br><span class="line">scp k8s-key.tgz k8s-master2:~/</span><br><span class="line">scp k8s-key.tgz k8s-master3:~/</span><br><span class="line">ssh k8s-master2 &apos;tar xf k8s-key.tgz -C /etc/kubernetes/&apos;</span><br><span class="line">ssh k8s-master3 &apos;tar xf k8s-key.tgz -C /etc/kubernetes/&apos;</span><br></pre></td></tr></table></figure>
<h4 id="2-配置第二个Master节点（第二个Master节点）"><a href="#2-配置第二个Master节点（第二个Master节点）" class="headerlink" title="2. 配置第二个Master节点（第二个Master节点）"></a>2. 配置第二个Master节点（第二个Master节点）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;kubeadm-master.config&lt;&lt;EOF</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1alpha2</span><br><span class="line">kind: MasterConfiguration</span><br><span class="line">kubernetesVersion: v1.11.1</span><br><span class="line"></span><br><span class="line">apiServerCertSANs:</span><br><span class="line">- &quot;k8s-master1&quot;</span><br><span class="line">- &quot;k8s-master2&quot;</span><br><span class="line">- &quot;k8s-master3&quot;</span><br><span class="line">- &quot;192.168.1.111&quot;</span><br><span class="line">- &quot;192.168.1.112&quot;</span><br><span class="line">- &quot;192.168.1.113&quot;</span><br><span class="line">- &quot;192.168.1.110&quot;</span><br><span class="line">- &quot;127.0.0.1&quot;</span><br><span class="line"></span><br><span class="line">api:</span><br><span class="line">  advertiseAddress: $CP1_IP</span><br><span class="line">  controlPlaneEndpoint: 192.168.1.110:8443</span><br><span class="line"></span><br><span class="line">etcd:</span><br><span class="line">  local:</span><br><span class="line">    extraArgs:</span><br><span class="line">      listen-client-urls: &quot;https://127.0.0.1:2379,https://$CP1_IP:2379&quot;</span><br><span class="line">      advertise-client-urls: &quot;https://$CP1_IP:2379&quot;</span><br><span class="line">      listen-peer-urls: &quot;https://$CP1_IP:2380&quot;</span><br><span class="line">      initial-advertise-peer-urls: &quot;https://$CP1_IP:2380&quot;</span><br><span class="line">      initial-cluster: &quot;$CP0_HOSTNAME=https://$CP0_IP:2380,$CP1_HOSTNAME=https://$CP1_IP:2380&quot;</span><br><span class="line">      initial-cluster-state: existing</span><br><span class="line">    serverCertSANs:</span><br><span class="line">      - $CP1_HOSTNAME</span><br><span class="line">      - $CP1_IP</span><br><span class="line">    peerCertSANs:</span><br><span class="line">      - $CP1_HOSTNAME</span><br><span class="line">      - $CP1_IP</span><br><span class="line"></span><br><span class="line">controllerManagerExtraArgs:</span><br><span class="line">  node-monitor-grace-period: 10s</span><br><span class="line">  pod-eviction-timeout: 10s</span><br><span class="line"></span><br><span class="line">networking:</span><br><span class="line">  podSubnet: 10.244.0.0/16</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 配置kubelet</span><br><span class="line">kubeadm alpha phase certs all --config kubeadm-master.config</span><br><span class="line">kubeadm alpha phase kubelet config write-to-disk --config kubeadm-master.config</span><br><span class="line">kubeadm alpha phase kubelet write-env-file --config kubeadm-master.config</span><br><span class="line">kubeadm alpha phase kubeconfig kubelet --config kubeadm-master.config</span><br><span class="line">systemctl restart kubelet</span><br><span class="line"></span><br><span class="line"># 添加etcd到集群中</span><br><span class="line">KUBECONFIG=/etc/kubernetes/admin.conf kubectl exec -n kube-system etcd-$&#123;CP0_HOSTNAME&#125; -- etcdctl --ca-file /etc/kubernetes/pki/etcd/ca.crt --cert-file /etc/kubernetes/pki/etcd/peer.crt --key-file /etc/kubernetes/pki/etcd/peer.key --endpoints=https://$&#123;CP0_IP&#125;:2379 member add $&#123;CP1_HOSTNAME&#125; https://$&#123;CP1_IP&#125;:2380</span><br><span class="line">kubeadm alpha phase etcd local --config kubeadm-master.config</span><br><span class="line"></span><br><span class="line"># 部署</span><br><span class="line">kubeadm alpha phase kubeconfig all --config kubeadm-master.config</span><br><span class="line">kubeadm alpha phase controlplane all --config kubeadm-master.config</span><br><span class="line">kubeadm alpha phase mark-master --config kubeadm-master.config</span><br></pre></td></tr></table></figure>
<h4 id="3-部署第三个Master节点-（第三个Master节点）"><a href="#3-部署第三个Master节点-（第三个Master节点）" class="headerlink" title="3. 部署第三个Master节点 （第三个Master节点）"></a>3. 部署第三个Master节点 （第三个Master节点）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;kubeadm-master.config&lt;&lt;EOF</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1alpha2</span><br><span class="line">kind: MasterConfiguration</span><br><span class="line">kubernetesVersion: v1.11.1</span><br><span class="line"></span><br><span class="line">apiServerCertSANs:</span><br><span class="line">- &quot;k8s-master1&quot;</span><br><span class="line">- &quot;k8s-master2&quot;</span><br><span class="line">- &quot;k8s-master3&quot;</span><br><span class="line">- &quot;192.168.1.111&quot;</span><br><span class="line">- &quot;192.168.1.112&quot;</span><br><span class="line">- &quot;192.168.1.113&quot;</span><br><span class="line">- &quot;192.168.1.110&quot;</span><br><span class="line">- &quot;127.0.0.1&quot;</span><br><span class="line"></span><br><span class="line">api:</span><br><span class="line">  advertiseAddress: $CP2_IP</span><br><span class="line">  controlPlaneEndpoint: 192.168.1.110:8443</span><br><span class="line"></span><br><span class="line">etcd:</span><br><span class="line">  local:</span><br><span class="line">    extraArgs:</span><br><span class="line">      listen-client-urls: &quot;https://127.0.0.1:2379,https://$CP2_IP:2379&quot;</span><br><span class="line">      advertise-client-urls: &quot;https://$CP2_IP:2379&quot;</span><br><span class="line">      listen-peer-urls: &quot;https://$CP2_IP:2380&quot;</span><br><span class="line">      initial-advertise-peer-urls: &quot;https://$CP2_IP:2380&quot;</span><br><span class="line">      initial-cluster: &quot;$CP0_HOSTNAME=https://$CP0_IP:2380,$CP1_HOSTNAME=https://$CP1_IP:2380,$CP2_HOSTNAME=https://$CP2_IP:2380&quot;</span><br><span class="line">      initial-cluster-state: existing</span><br><span class="line">    serverCertSANs:</span><br><span class="line">      - $CP2_HOSTNAME</span><br><span class="line">      - $CP2_IP</span><br><span class="line">    peerCertSANs:</span><br><span class="line">      - $CP2_HOSTNAME</span><br><span class="line">      - $CP2_IP</span><br><span class="line"></span><br><span class="line">controllerManagerExtraArgs:</span><br><span class="line">  node-monitor-grace-period: 10s</span><br><span class="line">  pod-eviction-timeout: 10s</span><br><span class="line"></span><br><span class="line">networking:</span><br><span class="line">  podSubnet: 10.244.0.0/16</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 配置kubelet</span><br><span class="line">kubeadm alpha phase certs all --config kubeadm-master.config</span><br><span class="line">kubeadm alpha phase kubelet config write-to-disk --config kubeadm-master.config</span><br><span class="line">kubeadm alpha phase kubelet write-env-file --config kubeadm-master.config</span><br><span class="line">kubeadm alpha phase kubeconfig kubelet --config kubeadm-master.config</span><br><span class="line">systemctl restart kubelet</span><br><span class="line"></span><br><span class="line"># 添加etcd到集群中</span><br><span class="line">KUBECONFIG=/etc/kubernetes/admin.conf kubectl exec -n kube-system etcd-$&#123;CP0_HOSTNAME&#125; -- etcdctl --ca-file /etc/kubernetes/pki/etcd/ca.crt --cert-file /etc/kubernetes/pki/etcd/peer.crt --key-file /etc/kubernetes/pki/etcd/peer.key --endpoints=https://$&#123;CP0_IP&#125;:2379 member add $&#123;CP2_HOSTNAME&#125; https://$&#123;CP2_IP&#125;:2380</span><br><span class="line">kubeadm alpha phase etcd local --config kubeadm-master.config</span><br><span class="line"></span><br><span class="line"># 部署</span><br><span class="line">kubeadm alpha phase kubeconfig all --config kubeadm-master.config</span><br><span class="line">kubeadm alpha phase controlplane all --config kubeadm-master.config</span><br><span class="line">kubeadm alpha phase mark-master --config kubeadm-master.config</span><br></pre></td></tr></table></figure>
<h4 id="4-配置使用kubectl-在任意master节点操作"><a href="#4-配置使用kubectl-在任意master节点操作" class="headerlink" title="4. 配置使用kubectl (在任意master节点操作)"></a>4. 配置使用kubectl (在任意master节点操作)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rm -rf $HOME/.kube</span><br><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line"># 查看node节点</span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"># 只有网络插件也安装配置完成之后，才能会显示为ready状态</span><br><span class="line"># 设置master允许部署应用pod，参与工作负载，现在可以部署其他系统组件</span><br><span class="line"># 如 dashboard, heapster, efk等</span><br><span class="line">kubectl taint nodes --all node-role.kubernetes.io/master-</span><br></pre></td></tr></table></figure>
<h4 id="5-配置网络插件-在任意master节点操作"><a href="#5-配置网络插件-在任意master节点操作" class="headerlink" title="5. 配置网络插件 (在任意master节点操作)"></a>5. 配置网络插件 (在任意master节点操作)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line">kubectl apply -f kube-flannel.yml</span><br></pre></td></tr></table></figure>
<h4 id="6-子节点加入集群-（所有子节点）"><a href="#6-子节点加入集群-（所有子节点）" class="headerlink" title="6. 子节点加入集群 （所有子节点）"></a>6. 子节点加入集群 （所有子节点）</h4><p>就是你初始化第一个master保存的命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join k8s.test.local:8443 --token bqnani.kwxe3y34vy22xnhm --discovery-token-ca-cert-hash sha256:b6146fea7a63d3a66e406c12f55f8d99537db99880409939e4aba206300e06cc</span><br></pre></td></tr></table></figure></p>
<h4 id="7-查看节点状态"><a href="#7-查看节点状态" class="headerlink" title="7. 查看节点状态"></a>7. 查看节点状态</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure>
<p>返回如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NAME          STATUS    ROLES     AGE       VERSION</span><br><span class="line">k8s-master1   Ready     master    49m       v1.11.1</span><br><span class="line">k8s-master2   Ready     master    47m       v1.11.1</span><br><span class="line">k8s-master3   Ready     master    45m       v1.11.1</span><br><span class="line">k8s-slave1    Ready     &lt;none&gt;    42m       v1.11.1</span><br><span class="line">k8s-slave2    Ready     &lt;none&gt;    42m       v1.11.1</span><br></pre></td></tr></table></figure></p>
<h4 id="8-配置k8s可视化"><a href="#8-配置k8s可视化" class="headerlink" title="8. 配置k8s可视化"></a>8. 配置k8s可视化</h4><p>没有Git请自行安装。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># clone 配置文件</span><br><span class="line">git clone https://github.com/BrickCat/kubernetes-dashboard.git</span><br><span class="line"></span><br><span class="line"># 执行文件</span><br><span class="line">cd kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">kubectl  -n kube-system create -f .</span><br></pre></td></tr></table></figure>
<p>配置角色文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim dashboard-admin.yaml</span><br></pre></td></tr></table></figure></p>
<p>添加如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kube-system</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -f ./dashboard-admin.yaml create</span><br></pre></td></tr></table></figure>
<h4 id="9-访问集群"><a href="#9-访问集群" class="headerlink" title="9. 访问集群"></a>9. 访问集群</h4><p> <a href="http://192.168.1.111:30090" target="_blank" rel="noopener">http://192.168.1.111:30090</a></p>
<p> <img src="http://pdjjmqkea.bkt.clouddn.com/HA.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;实验环境&quot;&gt;&lt;a href=&quot;#实验环境&quot; class=&quot;headerlink&quot; title=&quot;实验环境&quot;&gt;&lt;/a&gt;实验环境&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;hostname&lt;/th&gt;
&lt;th&gt;IP&lt;/th&gt;
&lt;th&gt;内存&lt;/th&gt;
&lt;th&gt;职责&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;k8s-vip&lt;/td&gt;
&lt;td&gt;192.168.1.110&lt;/td&gt;
&lt;td&gt;——&lt;/td&gt;
&lt;td&gt;VIP（虚拟IP）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;k8s-master1&lt;/td&gt;
&lt;td&gt;192.168.1.111&lt;/td&gt;
&lt;td&gt;4G&lt;/td&gt;
&lt;td&gt;Master,Keepalived,HAProxy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;k8s-master2&lt;/td&gt;
&lt;td&gt;192.168.1.112&lt;/td&gt;
&lt;td&gt;4G&lt;/td&gt;
&lt;td&gt;Master,Keepalived,HAProxy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;k8s-master3&lt;/td&gt;
&lt;td&gt;192.168.1.113&lt;/td&gt;
&lt;td&gt;4G&lt;/td&gt;
&lt;td&gt;Master,Keepalived,HAProxy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;k8s-slave1&lt;/td&gt;
&lt;td&gt;192.168.1.114&lt;/td&gt;
&lt;td&gt;4G&lt;/td&gt;
&lt;td&gt;Worker&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;k8s-slave1&lt;/td&gt;
&lt;td&gt;192.168.1.115&lt;/td&gt;
&lt;td&gt;4G&lt;/td&gt;
&lt;td&gt;Worker&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="容器技术" scheme="http://blog.githink.cn/categories/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="kubernetes" scheme="http://blog.githink.cn/categories/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes/"/>
    
      <category term="docker" scheme="http://blog.githink.cn/categories/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes/docker/"/>
    
      <category term="k8s" scheme="http://blog.githink.cn/categories/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/kubernetes/docker/k8s/"/>
    
    
      <category term="kubernetes" scheme="http://blog.githink.cn/tags/kubernetes/"/>
    
      <category term="docker" scheme="http://blog.githink.cn/tags/docker/"/>
    
      <category term="容器" scheme="http://blog.githink.cn/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="k8s" scheme="http://blog.githink.cn/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Spring cloud config server 使用本地配置文件</title>
    <link href="http://blog.githink.cn/2018/02/09/Spring-cloud-config-server-%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://blog.githink.cn/2018/02/09/Spring-cloud-config-server-使用本地配置文件/</id>
    <published>2018-02-09T14:32:36.000Z</published>
    <updated>2018-03-29T07:41:37.736Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为了解决有的时候使用Git作为Config-Server托管中心拉取配置失败的问题"><a href="#为了解决有的时候使用Git作为Config-Server托管中心拉取配置失败的问题" class="headerlink" title="为了解决有的时候使用Git作为Config Server托管中心拉取配置失败的问题"></a>为了解决有的时候使用Git作为Config Server托管中心拉取配置失败的问题</h2><blockquote>
<p>学习Spring Cloud有一段时间了，今天在码云上看见一个非常不错的 Spring Cloud的项目 <strong><em><a href="https://gitee.com/log4j/pig" target="_blank" rel="noopener">Pig</a></em></strong> ,功能十分强大，配套教程、文档也特别全。这么牛逼的项目不得down下来学习学习？<br>于是clone下来，跟着视频安装好了各种环境，本以为万无一失的挨个启动就可以了。没想到启动到Config Server的时候并没有从Git服务器上拉取到配置信息。也去群里询问了，也问了作者 <code>@冷冷</code> 搞了半天也不行。后来觉得可能是公司的网管为了信息安全把一些端口给禁掉了，所有就想到把配置文件本地化了。</p>
</blockquote>
<p>下面我们就来看看如何将配置文件本地化。</p>
<ol>
<li><p>首先，我们先把配置文件从自己的Git服务器上拉取到本地。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://gitee.com/cqzqxq_lxh/pig-config.git</span><br><span class="line">git checkout dev</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后，拉取Spring Cloud 项目。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://gitee.com/log4j/pig.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>在pig-config模块下创建文件夹，把刚刚clone下来的配置文件拷贝到 <code>properties</code>文件夹中。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2018/02/09/Spring-cloud-config-server-使用本地配置文件/QQ20180209-230501.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></li>
<li>最后修改pig-config模块下的配置文件 <code>application.yml</code>。<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2018/02/09/Spring-cloud-config-server-使用本地配置文件/QQ20180209-231657.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
</li>
</ol>
<p><code>注意：</code>项目的启动腰包所有的配置文件的端口、Ip、用户名、密码之类的配置要改成自己的。</p>
<p>以上。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为了解决有的时候使用Git作为Config-Server托管中心拉取配置失败的问题&quot;&gt;&lt;a href=&quot;#为了解决有的时候使用Git作为Config-Server托管中心拉取配置失败的问题&quot; class=&quot;headerlink&quot; title=&quot;为了解决有的时候使用
    
    </summary>
    
      <category term="Spring Cloud" scheme="http://blog.githink.cn/categories/Spring-Cloud/"/>
    
    
      <category term="Spring Cloud" scheme="http://blog.githink.cn/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>axios post提交参数java后台接收不到参数解决办法</title>
    <link href="http://blog.githink.cn/2017/11/08/post%E4%BC%A0%E5%8F%82/"/>
    <id>http://blog.githink.cn/2017/11/08/post传参/</id>
    <published>2017-11-08T05:37:31.000Z</published>
    <updated>2018-03-29T07:41:37.741Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在浏览器中使用<code>axios</code>POST提交数据在后台接收的时候接收不到。<br><a id="more"></a></p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol>
<li>首先我们先来了解一下什么是<code>axios</code><br> Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</li>
<li>问题原因<br> 由于axios默认发送数据时，数据格式是Request Payload，而并非我们常用的Form Data格式，所以Java后台获取不到数据。在发送之前需要对数据进行处理。</li>
<li>解决办法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> params = <span class="keyword">new</span> URLSearchParams();</span><br><span class="line">params.append(<span class="string">'firstName'</span>,Fred);</span><br><span class="line"></span><br><span class="line">axios.post(<span class="string">'/user'</span>, params)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;在浏览器中使用&lt;code&gt;axios&lt;/code&gt;POST提交数据在后台接收的时候接收不到。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://blog.githink.cn/categories/javascript/"/>
    
    
      <category term="常见问题" scheme="http://blog.githink.cn/tags/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
      <category term="axios" scheme="http://blog.githink.cn/tags/axios/"/>
    
      <category term="javascript" scheme="http://blog.githink.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>解决springboot-shiro-session设置过期时间无效的问题</title>
    <link href="http://blog.githink.cn/2017/10/30/springboot-shiro-session/"/>
    <id>http://blog.githink.cn/2017/10/30/springboot-shiro-session/</id>
    <published>2017-10-30T06:19:19.000Z</published>
    <updated>2018-03-29T07:41:37.743Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在<code>springboot</code>整合<code>shiro</code>的时候session总是过期，往往是刚刚登录没一两分钟就又要重新登陆。网上查了很多资料<br>说是可以设置session的过期时间<code>server.session.timeout</code>，无论你设置成多少都无效，后来才知道此session和shiro的session根本就是两回事。<br><a id="more"></a></p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>下边我们就来看看在springboot中如何设置shiro的session过期时间。废话不多说直接上代码吧！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加session管理器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(name=<span class="string">"sessionManager"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DefaultWebSessionManager <span class="title">defaultWebSessionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">"ShiroConfiguration.defaultWebSessionManager()"</span>);</span><br><span class="line">	DefaultWebSessionManager sessionManager = <span class="keyword">new</span> DefaultWebSessionManager();</span><br><span class="line">	sessionManager.setCacheManager(cacheManager());</span><br><span class="line">	sessionManager.setSessionValidationInterval(<span class="number">3600000</span>*<span class="number">12</span>);</span><br><span class="line">	sessionManager.setGlobalSessionTimeout(<span class="number">3600000</span>*<span class="number">12</span>);</span><br><span class="line">	sessionManager.setDeleteInvalidSessions(<span class="keyword">true</span>);</span><br><span class="line">	sessionManager.setSessionValidationSchedulerEnabled(<span class="keyword">true</span>);</span><br><span class="line">	Cookie cookie = <span class="keyword">new</span> SimpleCookie(ShiroHttpSession.DEFAULT_SESSION_ID_NAME);</span><br><span class="line">	cookie.setName(<span class="string">"ITBC"</span>);</span><br><span class="line">	cookie.setHttpOnly(<span class="keyword">true</span>);</span><br><span class="line">	sessionManager.setSessionIdCookie(cookie);</span><br><span class="line">	<span class="keyword">return</span> sessionManager;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 用户授权信息Cache</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean</span>(name = <span class="string">"shiroCacheManager"</span>)</span><br><span class="line">   <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> MemoryConstrainedCacheManager();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Bean</span>(name = <span class="string">"securityManager"</span>)</span><br><span class="line">   <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> DefaultSecurityManager <span class="title">securityManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       DefaultSecurityManager sm = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">       <span class="comment">//添加缓存</span></span><br><span class="line">       sm.setCacheManager(cacheManager());</span><br><span class="line">       <span class="comment">//添加session</span></span><br><span class="line">   	sm.setSessionManager(defaultWebSessionManager());</span><br><span class="line">       <span class="keyword">return</span> sm;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>其实在springboot的实际开发中博主遇到了很多坑，网上的解决办法也是零零碎碎的，总感觉不是自己想要的。有时间整理整理总结一下，发出来大家一起学习。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;在&lt;code&gt;springboot&lt;/code&gt;整合&lt;code&gt;shiro&lt;/code&gt;的时候session总是过期，往往是刚刚登录没一两分钟就又要重新登陆。网上查了很多资料&lt;br&gt;说是可以设置session的过期时间&lt;code&gt;server.session.timeout&lt;/code&gt;，无论你设置成多少都无效，后来才知道此session和shiro的session根本就是两回事。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="springboot framework" scheme="http://blog.githink.cn/categories/springboot-framework/"/>
    
    
      <category term="springboot" scheme="http://blog.githink.cn/tags/springboot/"/>
    
      <category term="shiro" scheme="http://blog.githink.cn/tags/shiro/"/>
    
      <category term="常见问题" scheme="http://blog.githink.cn/tags/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>安装node以及npm学习ant-desgin</title>
    <link href="http://blog.githink.cn/2017/09/20/%E5%AE%89%E8%A3%85node%E4%BB%A5%E5%8F%8Anpm%E5%AD%A6%E4%B9%A0ant-desgin/"/>
    <id>http://blog.githink.cn/2017/09/20/安装node以及npm学习ant-desgin/</id>
    <published>2017-09-20T01:20:18.000Z</published>
    <updated>2018-03-29T07:41:37.759Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习ant-desgin遇到的一些问题"><a href="#学习ant-desgin遇到的一些问题" class="headerlink" title="学习ant-desgin遇到的一些问题"></a>学习ant-desgin遇到的一些问题</h2><p>　　在Mac上用brew安装的node.js,在使用npm时有些包是下载不下来的，导致项目编译失败。解决办法就是去官网下载LTS版本的node.js。</p>
<ul>
<li>1、首先先把Mac上的npm下载的包删干净，然后在执行 <code>brew uninstall node</code> <a href="https://segmentfault.com/a/1190000007445643" target="_blank" rel="noopener">参考</a></li>
<li>2、下载node.js 网址：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a> <font style="color:red;">注意：下载LTS版本</font></li>
<li>3、进入到你项目的目录里，再次执行 <code>npm i</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;学习ant-desgin遇到的一些问题&quot;&gt;&lt;a href=&quot;#学习ant-desgin遇到的一些问题&quot; class=&quot;headerlink&quot; title=&quot;学习ant-desgin遇到的一些问题&quot;&gt;&lt;/a&gt;学习ant-desgin遇到的一些问题&lt;/h2&gt;&lt;p&gt;　　
    
    </summary>
    
      <category term="react" scheme="http://blog.githink.cn/categories/react/"/>
    
      <category term="node" scheme="http://blog.githink.cn/categories/react/node/"/>
    
    
      <category term="react" scheme="http://blog.githink.cn/tags/react/"/>
    
      <category term="ant-desgin" scheme="http://blog.githink.cn/tags/ant-desgin/"/>
    
      <category term="dva" scheme="http://blog.githink.cn/tags/dva/"/>
    
      <category term="npm" scheme="http://blog.githink.cn/tags/npm/"/>
    
      <category term="node" scheme="http://blog.githink.cn/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>安装 Semantic UI</title>
    <link href="http://blog.githink.cn/2017/09/02/Semantic%20UI/"/>
    <id>http://blog.githink.cn/2017/09/02/Semantic UI/</id>
    <published>2017-09-02T15:43:05.000Z</published>
    <updated>2018-03-29T07:41:37.735Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Semantic-UI"><a href="#Semantic-UI" class="headerlink" title="Semantic UI"></a>Semantic UI</h2><p>　　Semantic作为一款开发框架，帮助开发者使用对人类友好的HTML语言构建优雅的响应式布局。它还提供了一套很方便的定制主题的方法，你可以用自己的想法去改变界面组件的样式。在这个教程里我们学习一下安装 Semantic UI 。</p>
<h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><p>　　我们使用shell去安装semantic UI，前提是你已经安装好了<code>nmp</code> <code>gulp</code>。</p>
<h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><ul>
<li><p>创建一个目录</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir semantic</span><br><span class="line">cd semantic</span><br></pre></td></tr></table></figure>
</li>
<li><p>用npm安装semantic UI</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install semantic-ui</span><br></pre></td></tr></table></figure>
<p>一路回车就OK了。</p>
</li>
<li>查看是否安装成功<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├── node_modules</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── semantic</span><br><span class="line">└── semantic.json</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这是安装之后的文件夹和文件列表。</p>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><ul>
<li><p>进入到semantic的目录里<strong>（是安装完之后的semantic的目录）</strong> 然后执行 gulp 命令。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">　cd semantic</span><br><span class="line">　gulp bulid</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看编译后的文件<br>编译完之后会在文件夹中生成<code>dist</code>文件夹。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dist		gulpfile.js	src		tasks</span><br></pre></td></tr></table></figure>
</li>
<li><p>现在到<code>dist</code>文件夹里看看都生成了什么东吧~</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">components		semantic.js		semantic.min.js</span><br><span class="line">semantic.css		semantic.min.css	themes</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>　　components 目录下面是单独的一些组件，如果你只想使用 Semantic UI 里的某些组件，可以在这个目录下面找到这些组件。如果你想使用全部的组件，可以使用 semantic.css 与 semantic.js ，或者使用它们的最小化之后的版本，semanitc.min.css 与 semantic.min.js 。<br>　　themes 目录下是主题的样式，现在主要有四种主题:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">basic		default		github		material</span><br></pre></td></tr></table></figure></p>
<p>修改主题只需要进入到<code>src</code>文件夹中修改<strong>theme.config</strong>文件即可。例如把<strong>default</strong>换成<strong>github</strong>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Semantic-UI&quot;&gt;&lt;a href=&quot;#Semantic-UI&quot; class=&quot;headerlink&quot; title=&quot;Semantic UI&quot;&gt;&lt;/a&gt;Semantic UI&lt;/h2&gt;&lt;p&gt;　　Semantic作为一款开发框架，帮助开发者使用对人类友好的HT
    
    </summary>
    
      <category term="UI" scheme="http://blog.githink.cn/categories/UI/"/>
    
    
      <category term="Semantic UI" scheme="http://blog.githink.cn/tags/Semantic-UI/"/>
    
  </entry>
  
  <entry>
    <title>windows 搭建Git服务器</title>
    <link href="http://blog.githink.cn/2017/08/31/windows%E6%90%AD%E5%BB%BAGit%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://blog.githink.cn/2017/08/31/windows搭建Git服务器/</id>
    <published>2017-08-31T03:42:59.000Z</published>
    <updated>2018-03-29T07:41:37.744Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h2><p>　　由于在GitHub上的私有项目是付费的，并且用GitHub Pages 搭建Hexo博客有的时候慢的真的想砸了电脑。所以就想自己搭建一个Git服务器，用于放一些私有项目和搭建一个Hexo博客。<br>　　下面就跟着我一起来用最简单的方法搭建Git服务器吧~ <a id="more"></a></p>
<h2 id="下载相关软件"><a href="#下载相关软件" class="headerlink" title="下载相关软件"></a>下载相关软件</h2><p>　　<a href="http://gitstack.com/download/" target="_blank" rel="noopener">gitstack</a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>　　下载完后双击就可以，安装的过程中是默认用<strong>80端口</strong>的，先把占用80端口的进程Kill掉。重新启动程序。一路下一步就好。安装的过程中也可以自定义安装目录。安装完成后在浏览器中输入<code>http://localhost/gitstack</code>就可以访问了，默认用户名密码是admin/admin。
　　</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4><ul>
<li>修改密码：在<strong>Settings</strong>-&gt;<strong>general</strong>-&gt;<strong>Administrator password</strong>中修改默认的密码。<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/08/31/windows搭建Git服务器/20170831115535.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></li>
<li>修改端口：在<strong>Settings</strong>-&gt;<strong>general</strong>-&gt;<strong>Server Ports</strong>中修改端口号，后续访问的话就是IP地址加端口号访问。<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/08/31/windows搭建Git服务器/20170831115703.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></li>
<li>修改仓库地址：<strong>Settings</strong>-&gt;<strong>general</strong>-&gt;<strong>Repositories Location</strong>中修改该地址。<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/08/31/windows搭建Git服务器/20170831115755.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
</li>
</ul>
<h4 id="添加用户和组"><a href="#添加用户和组" class="headerlink" title="添加用户和组"></a>添加用户和组</h4><ul>
<li>添加用户<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/08/31/windows搭建Git服务器/20170831120008.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></li>
<li>添加组<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/08/31/windows搭建Git服务器/20170831123257.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
</li>
</ul>
<h4 id="创建Repositories"><a href="#创建Repositories" class="headerlink" title="创建Repositories"></a>创建Repositories</h4><ul>
<li>给Repositories加用户<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/08/31/windows搭建Git服务器/20170831123619.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
</li>
</ul>
<p>创建完Repositories要给它添加用户的，否则访问不了。注意：<strong>管理员账户并不能访问这个Repositories</strong>。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/08/31/windows搭建Git服务器/20170831124218.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>git clone 你创建的Repositories，提示你输入用户名密码，就能把项目clone下来。</p>
<h2 id="预告"><a href="#预告" class="headerlink" title="预告"></a>预告</h2><p>搭建不依赖于GitHub Pages 的 Hexo 博客。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;初衷&quot;&gt;&lt;a href=&quot;#初衷&quot; class=&quot;headerlink&quot; title=&quot;初衷&quot;&gt;&lt;/a&gt;初衷&lt;/h2&gt;&lt;p&gt;　　由于在GitHub上的私有项目是付费的，并且用GitHub Pages 搭建Hexo博客有的时候慢的真的想砸了电脑。所以就想自己搭建一个Git服务器，用于放一些私有项目和搭建一个Hexo博客。&lt;br&gt;　　下面就跟着我一起来用最简单的方法搭建Git服务器吧~&lt;/p&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://blog.githink.cn/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="Git" scheme="http://blog.githink.cn/tags/Git/"/>
    
      <category term="server" scheme="http://blog.githink.cn/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>windows搭建流媒体服务器</title>
    <link href="http://blog.githink.cn/2017/08/30/windows%E6%90%AD%E5%BB%BA%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://blog.githink.cn/2017/08/30/windows搭建流媒体服务器/</id>
    <published>2017-08-30T03:42:59.000Z</published>
    <updated>2018-03-29T07:41:37.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h1><h2 id="什么是流媒体服务器"><a href="#什么是流媒体服务器" class="headerlink" title="什么是流媒体服务器"></a>什么是流媒体服务器</h2><p>　　流媒体指以流方式在网络中传送音频、视频和多媒体文件的媒体形式。相对于下载后观看的网络播放形式而言，流媒体的典型特征是把连续的音频和视频信息压缩后放到网络服务器上，用户边下载边观看，而不必等待整个文件下载完毕。<br>由于流媒体技术的优越性，该技术广泛应用于视频点播、视频会议、远程教育、远程医疗和在线直播系统中。<br><a id="more"></a>   作为新一代互联网应用的标志，流媒体技术在近几年得到了飞速的发展。<br>流媒体服务器是流媒体应用的核心系统，是运营商向用户提供视频服务的关键平台。流媒体服务器的主要功能是对流媒体内容进行采集、<br>缓存、调度和传输播放。流媒体应用系统的主要性能体现都取决于媒体服务器的性能和服务质量。因此，流媒体服务器是流媒体应用系统的基础，也是最主要的组成部分。</p>
<h2 id="什么是HLS-HTTP-Live-Streaming"><a href="#什么是HLS-HTTP-Live-Streaming" class="headerlink" title="什么是HLS (HTTP Live Streaming)"></a>什么是HLS (HTTP Live Streaming)</h2><p>　　常用的流媒体协议主要有 HTTP 渐进下载和基于 RTSP/RTP 的实时流媒体协议，这二种基本是完全不同的东西，目前比较方便又好用的是用 HTTP 渐进下载方法。在这个中 apple 公司的 HTTP Live Streaming 是这个方面的代表。它最初是苹果公司针对iPhone、iPod、iTouch和iPad等移动设备而开发的流.现在见到在桌面也有很多应用了，HTML5 是直接支持这个。<br>但是HLS协议的小切片方式会生成大量的文件，存储或处理这些文件会造成大量资源浪费。如果要实现数天的时移，索引量将会是个巨额数字，并明显影响请求速度。因此，HLS协议对存储I/O要求相当苛刻。对此，也有公司提出了非常好的解决方案。<br>　　新型点播服务器系统，独创了内存缓存数据实时切片技术，颠覆了这种传统实现方法，从根本上解决了大量切片的碎片问题，使得单台服务器的切片与打包能力不再是瓶颈。其基本原理如下：<br>　　不将TS切片文件存到磁盘，而是存在内存当中，这种技术使得服务器的磁盘上面不再会有“数以吨计”的文件碎片，极大减少了磁盘的I/O次数，延长了服务器磁盘的使用寿命，极大提高了服务器运行的稳定性。同时，由于使用这种技术，使得终端请求数据时直接从服务器的内存中获取，极大提高了对终端数据请求的反应速度，优化了视频观看体验。</p>
<h2 id="什么是FFmpeg"><a href="#什么是FFmpeg" class="headerlink" title="什么是FFmpeg"></a>什么是FFmpeg</h2><p>　　FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。采用LGPL或GPL许可证。它提供了录制、转换以及流化音视频的完整解决方案。它包含了非常先进的音频/视频编解码库libavcodec，为了保证高可移植性和编解码质量，libavcodec里很多code都是从头开发的。</p>
<h2 id="什么是Nginx"><a href="#什么是Nginx" class="headerlink" title="什么是Nginx"></a>什么是Nginx</h2><p>　　Nginx (engine x) 是一个高性能的HTTP和反向代理服务器，也是一个IMAP/POP3/SMTP服务器。</p>
<h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>　　JAVA环境不在这里赘述，自行百度。博主这里是Windows server 2012的环境，后续会出Mac、Linux环境的教程。</p>
<h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><p><a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">Nginx-1.12.0 stable</a></p>
<ul>
<li>查看Nginx的版本号：nginx -v</li>
<li>启动Nginx: cd 安装目录 ，start nginx</li>
<li>快速停止或关闭Nginx：nginx -s stop</li>
<li>正常停止或关闭Nginx：nginx -s quit</li>
<li>配置文件修改重装载命令：nginx -s reload</li>
</ul>
<h3 id="安装FFmpeg"><a href="#安装FFmpeg" class="headerlink" title="安装FFmpeg"></a>安装FFmpeg</h3><p><a href="http://ffmpeg.zeranoe.com/builds/" target="_blank" rel="noopener">FFmpeg</a><br>　　根据自己的操作系统选择下载最新的32位或64位静态程序版本。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h3><p>　　博主感觉Nginx真的是一个好东西，能做点播服务器、直播服务器、文件服务器、负载均衡等等一些牛逼的功能。深入了解只有不得不佩服它的的强大。<br>下面就跟着博主一起去见识一下<code>Nginx</code>吧（后续博主会写<code>Nginx</code>配置https和wss以及一个IP绑定多个域名等）。</p>
<ul>
<li>直接解压缩就好了，windows下直接点击nginx.exe就可以启动Nginx，在浏览器里访问<a href="http://localhost" target="_blank" rel="noopener">http://localhost</a>就可以看到<code>Nigix</code>的欢迎页面。由于<code>Nginx</code>默认使用80端口可能会被占用。<br>你要先kill掉占用80端口的进程。</li>
<li><p>在conf文件夹中打开<code>mine.types</code>文件。<br> 在<code>application/zip          zip;</code>后面加上如下两行：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">application/x-mpegURL 				  m3u8; </span><br><span class="line">application/vnd.apple.mpegurl 		  m3u8;</span><br></pre></td></tr></table></figure>
<p> 然后在<code>video/x-msvideo                       avi;</code>添加<code>video/MP2T                               ts;</code></p>
</li>
<li><p>打开<code>nginx.conf</code>文件，（最好先备份一下）<br>  下面就是如何配置<code>Nginx</code>的代码</p>
  <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;<span class="comment">#要开启的进程数 一般等于cpu的总核数 其实一般情况下开4个或8个就可 我开2个</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;<span class="comment">#默认最大的并发数为1024，如果你的网站访问量过大，已经远远超过1024这个并发数，那你就要修改worker_connecions这个值 ，这个值越大，并发数也有就大。当然，你一定要按照你自己的实际情况而定，也不能设置太大，不能让你的CPU跑满100%。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#解决Nginx跨域访问 Begin</span></span><br><span class="line">    </span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">	<span class="attribute">add_header</span> Cache-Control <span class="literal">no</span>-cache;</span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Origin'</span> <span class="string">'*'</span> always;</span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">'Access-Control-Expose-Headers'</span> <span class="string">'Content-Length,Content-Range'</span>;</span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Headers'</span> <span class="string">'Range'</span>;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">#解决Nginx跨域访问 End</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">    <span class="comment">#                  '$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">    <span class="comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">8080</span>;<span class="comment">#监听的的端口默认是80</span></span><br><span class="line">        <span class="attribute">server_name</span>  localhost;<span class="comment">#默认就行</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line">        <span class="comment">#请求路径 /</span></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">			<span class="comment">#设置HTTP Response的Content-Type</span></span><br><span class="line">			types&#123;</span><br><span class="line">				application/vnd.apple.mpegurl m3u8;</span><br><span class="line">				video/MP2T ts;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">#指定访问的根目录，也是放你视频切片文件的地方，不用配置可直接访问 如：http://localhost:8080/playList.m3u8</span></span><br><span class="line">			<span class="attribute">root</span> html;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#访问.mp4格式的文件</span></span><br><span class="line">		 <span class="attribute">location</span> <span class="regexp">~ .mp4</span> &#123;</span><br><span class="line">            mp4;</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    root           html;</span></span><br><span class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">        <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache's document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx's one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#    deny  all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       8000;</span></span><br><span class="line">    <span class="comment">#    listen       somename:8080;</span></span><br><span class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">    <span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>  到这里Nginx全部配置完成。</p>
</li>
</ul>
<h3 id="配置FFmpeg"><a href="#配置FFmpeg" class="headerlink" title="配置FFmpeg"></a>配置FFmpeg</h3><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><ul>
<li>解压缩后它会生成一个类似名为“ffmpeg-20150504-Git-eb9fb50-win32-static”的新文件夹，重命名为ffmpeg<br>  配置</li>
<li>配置环境变量<br>点击“开始菜单”，再点击“控制面板”，再点击“系统与安全”，再点击“系统”，然后点击“高级系统设置”，跳出“系统属性”窗口后，最后点击“环境变量”按钮：<br><img src="http://s3.51cto.com/wyfs02/M00/6C/65/wKioL1VIpZjiuDl3AAObiC2DUj4845.jpg" alt=""><br>点击“环境变量”按钮后，跳出“环境变量”窗口，找到并选中“Path”变量，点击编辑：<br><img src="http://s3.51cto.com/wyfs02/M02/6C/6A/wKiom1VIpWeyZg25AAF_wm3KTgk709.jpg" alt=""><br>在“Path”变量原有变量值内容上加上“;d:\ffmpeg\bin”（注：;代表间隔，不可遗漏；d:\ffmpeg\bin代表FFmpeg的安装路径下的bin文件夹），一路点击“确定”即可。<br><img src="http://s3.51cto.com/wyfs02/M01/6C/6A/wKiom1VIp1uSCFZyAAF3BXe18Jw236.jpg" alt=""><br>打开命令提示符窗口。输入命令“ffmpeg  –version”。如果命令提示窗口返回FFmpeg的版本信息，那么就说明安装成功了，你可以在命令提示行中任意文件夹下运行FFmpeg。<br><img src="http://s3.51cto.com/wyfs02/M01/6C/66/wKioL1VIqXLi-jYVAANfAKVi_Tk312.jpg" alt=""></li>
</ul>
<h4 id="视频切片与访问"><a href="#视频切片与访问" class="headerlink" title="视频切片与访问"></a>视频切片与访问</h4><ul>
<li><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i output.mp4 -c:v libx264 -c:a aac -strict -2 -f hls -hls_list_size 0 -hls_time 5 output.m3u8</span><br></pre></td></tr></table></figure>
<p>输入与输出的文件都可以添加路径。如：<code>ffmpeg -i C:\Users\Desktop\output.mp4 -c:v libx264 -c:a aac -strict -2 -f hls -hls_list_size 0 -hls_time 5 C:\Users\Desktop\nginx-1.12.0\html\output.m3u8</code><br><code>-hls_list_size</code> n:设置播放列表保存的最多条目，设置为0会保存有所片信息，默认值为5。<br><code>-hls_time</code> n: 设置每片的长度，默认值为2。单位为秒。</p>
</li>
<li><p>查看<br>下载<a href="https://www.baidu.com/link?url=9IA_yBR9A6HigsKkk0TAiypYQTMqfEXulqYdEBYKu2UF1e9t6agialwLpl0DY8tTNhybXhmK3L6KC35rzS4fR-FPhN4rTxPxf5dkt474EfW&amp;wd=&amp;eqid=f0c9cd31000442200000000259a66e62" target="_blank" rel="noopener">VLC media player</a>打开本地文件<br>output.m3u8,如果能播放表示切片成功。</p>
</li>
</ul>
<h3 id="Nginx结合FFmpeg"><a href="#Nginx结合FFmpeg" class="headerlink" title="Nginx结合FFmpeg"></a>Nginx结合FFmpeg</h3><ul>
<li>大体思路就是把视频切片到指定位置，用nginx去代理你这个位置，就可以了。</li>
<li>一 把<code>nginx</code>文件里的html文件夹下的所有文件都删除。新建一个m3u8的文件夹。</li>
<li>二 把切片命令的输出地址换成你的m3u8文件夹所在的位置。</li>
<li>三 启动<code>Nginx</code>,在VLC中输入<code>http://localhost:8080/m3u8/output.m3u8</code>（nginx监听的8080端口）<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/2017/08/30/windows搭建流媒体服务器/20170830155722.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
</li>
</ul>
<h2 id="预告"><a href="#预告" class="headerlink" title="预告"></a>预告</h2><p> 如何用Webuploader上传大文件视频，并用FFmpeg切片，Nginx代理文件，html播放。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;理论&quot;&gt;&lt;a href=&quot;#理论&quot; class=&quot;headerlink&quot; title=&quot;理论&quot;&gt;&lt;/a&gt;理论&lt;/h1&gt;&lt;h2 id=&quot;什么是流媒体服务器&quot;&gt;&lt;a href=&quot;#什么是流媒体服务器&quot; class=&quot;headerlink&quot; title=&quot;什么是流媒体服务器&quot;&gt;&lt;/a&gt;什么是流媒体服务器&lt;/h2&gt;&lt;p&gt;　　流媒体指以流方式在网络中传送音频、视频和多媒体文件的媒体形式。相对于下载后观看的网络播放形式而言，流媒体的典型特征是把连续的音频和视频信息压缩后放到网络服务器上，用户边下载边观看，而不必等待整个文件下载完毕。&lt;br&gt;由于流媒体技术的优越性，该技术广泛应用于视频点播、视频会议、远程教育、远程医疗和在线直播系统中。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://blog.githink.cn/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="环境配置" scheme="http://blog.githink.cn/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="server" scheme="http://blog.githink.cn/tags/server/"/>
    
      <category term="nginx" scheme="http://blog.githink.cn/tags/nginx/"/>
    
      <category term="ffmpeg" scheme="http://blog.githink.cn/tags/ffmpeg/"/>
    
      <category term="hls" scheme="http://blog.githink.cn/tags/hls/"/>
    
  </entry>
  
</feed>
